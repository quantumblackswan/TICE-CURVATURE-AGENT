name: TICE Deployment CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-core:
    name: Test Core Functionality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: 🧬 Checkout Repository
      uses: actions/checkout@v4

    - name: 🛠️ Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx

    - name: 🧪 Run Core Tests
      run: |
        pytest tests/test_tice.py -v
        pytest tests/test_fastapi_service.py -v

    - name: 🧠 Run Example Simulation
      run: |
        python examples/run_tice_sim.py

  test-deployment:
    name: Test Deployment Methods
    runs-on: ubuntu-latest
    needs: test-core

    steps:
    - name: 🧬 Checkout Repository
      uses: actions/checkout@v4

    - name: 🛠️ Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🚀 Test API Startup
      run: |
        timeout 10s python "TICE plug newest.py" || test $? -eq 124

    - name: 🐳 Test Docker Build
      run: |
        docker build -t tice-test .

    - name: 🧪 Test Package Build
      run: |
        pip install build
        python -m build
        pip install dist/*.whl

  security-scan:
    name: Security & Quality Checks
    runs-on: ubuntu-latest
    needs: test-core

    steps:
    - name: 🧬 Checkout Repository
      uses: actions/checkout@v4

    - name: 🛠️ Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: 🔒 Run Security Scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true

    - name: 📋 Upload Security Reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
      if: always()

  deploy-staging:
    name: Deploy to Staging (if main branch)
    runs-on: ubuntu-latest
    needs: [test-deployment, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 🧬 Checkout Repository
      uses: actions/checkout@v4

    - name: 🚀 Simulate Deployment
      run: |
        echo "🌟 Would deploy TICE Agent to staging environment"
        echo "✅ All deployment checks passed"
        echo "🔗 API would be available at: https://tice-staging.example.com"

    - name: 📊 Archive Deployment Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-logs
        path: |
          logs/
          *.log
      if: always()